O que é React?
    "Uma biblioteca JavaScript para criar interfaces de usuários", ou seja, React é uma biblioteca e não um framework!
A principal função é a criação da interface para o usuário. React é uma linguagem declarativa, está preocupado apenas com o que é exibido na
interface do usuário.

    * Vantagens de utilizar React como biblioteca:
        Tendo mais controle sobre sua aplicação, não fica amarrado a um framework e a evolução dele e podendo trabalhar com JavaScript
    de forma mais simples. Pode ser utilizado em qualquer lugar, dispositivos celulares, criação de PWA, front-end e também no back-end.
    React é baseado em componentes.
    
    Criado em 2011 por Jordan Walker engenheiro do Facebook;
    Baseado no XHP, um framework para criação de HTML no PHP;
    Utilizado no mural de notícias da ferramenta.

2012 - Utilizado no Instagram
2013 - Anúncio para liberação OpenSource na JSconfig US
2015 - React Native
2015 - UWP (Universal Windowns Platform)

Empresas que utiliza o React: Facebook, Instagram, Netflix, ifood, luizalabs, entre outros...

O que é JSX?
    JSX é uma linguagem de marcação criada para pode criar elementos primitivos e estrutura HTML, e ter todo poder do JavaScript dentro dele.
Podendo executar funções JavaScript, ter variáveis dentro do JSX.

    * const element = <h1> Hello, world! </h1> -> Nem HTML e nem uma string! 

    React não separa as tecnologias colocando marcação em arquivos separados, e sim separa conceitos e mantém o código pouco acoplado chamando-os
de componentes.

    Não é obrigatório a utilização do JSX;
    Sintax Suggar para React.createElment;

    O browser não interpreta o JSX, para isso é necessário um transpilador para que a aplicação possa entender o código. O mais utilizado é o Babel.

Renderização de elementos
    React Dom é o que vai renderizar os elementos do React, toda renderização é feita em nós raíz.
    React "pensa" em como a interface deve estar a cada momento ao invés de altera-la com o tempo, o que faz ter ganho de performance e evita
uma série de erros.

Componentes e Props
    Componente pode trabalhar de duas formas função e classe

Estado e Ciclo de ViDA
    Inicialização;
    Montagem;
    Atualização;
    Desmonetagem.

    Nenhum componente pai ou filho devem saber se outro componente possui estado ou não. O estado é apenas local ao componente e caso seja
necessário enviar algum atributo para outro então é feiro via props.

O que é Webpack?
    É um module bundler um empacotador de módulos para aplicação JS), gerando bundler que será utilizado no HTML, em ES5.

    Principais conceitos do Webpack:
        * Entry - Utilizando grafo, o Webpack precisa de um ponto de entreda para buscar todos os módulose dependências.
        * Output - É para determinar quais são os bundlers que o Webpack irá emitir.
        * Loaders - É para permitir que o Webpack gerencie arquivos não são JavaScript.
        * Plugins - Plugins podem ser utilizados para otimização de pacotes, manificação, injeção de scripts e muito mais.
        * Mode - Utilizados para abordagem de configuração zero. É possível configurar módulos como production, development ou none.
            Production - trás otimizações internas gerando um arquivo final para entrar em introdução.
            Development - É executado com três plugins: UglifyJsPlugin, ModuleConcatenationPlugin e NoEmitOnErrorsPlugin.

    Criação do arquivo webpack.config.js

        npm i -D webpack webpack-cli
        "build": "webpack --mode production"
        npm i @babel/core babel-loader @babel/preset-env @babel/preset-react --save-dev

O que é ESLint?
    Manter a qualidade do código e um padrão pro time no desenvolvimento, evitando alguns erros.

    configuração:

        npm install --save-dev eslint babel-eslint eslint-plugin-react eslint-watch

Renderização Condicional
    "Em React, você pode criar componentes distintos que encapsulam o comportamento que você precisa. Então, você pode renderizar apenas
alguns dos elementos, dependendo do estado da sua aplicação."
    https://pt-br.reactjs.org/docs/conditional-rendering.html